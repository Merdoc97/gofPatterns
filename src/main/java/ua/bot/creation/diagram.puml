@startuml Generating Patterns

package "generating" {
  ' Singleton Pattern
  package "singleton" {
    class "Singleton" {
      -instance: Singleton
      -Singleton()
      +{static} getInstance(): Singleton
      +operation()
    }
    note bottom of Singleton
      Ensures a class has only one instance and provides a global point of access to it.
      - Private constructor
      - Static instance field
      - Static getInstance method
    end note
  }

  ' Factory Method Pattern
  package "factory" {
    abstract class "Creator" {
      +factoryMethod(): Product
      +operation()
    }
    class "ConcreteCreatorA" {
      +factoryMethod(): Product
    }
    class "ConcreteCreatorB" {
      +factoryMethod(): Product
    }
    interface "Product" {
      +operation()
    }
    class "ConcreteProductA" {
      +operation()
    }
    class "ConcreteProductB" {
      +operation()
    }
    Creator <|-- ConcreteCreatorA
    Creator <|-- ConcreteCreatorB
    Product <|.. ConcreteProductA
    Product <|.. ConcreteProductB
    ConcreteCreatorA ..> ConcreteProductA : creates
    ConcreteCreatorB ..> ConcreteProductB : creates
    
    note bottom of Creator
      Defines an interface for creating an object, but lets subclasses decide
      which class to instantiate. Factory Method lets a class defer
      instantiation to subclasses.
    end note
  }

  ' Abstract Factory Pattern
  package "abstractfactory" {
    interface "AbstractFactory" {
      +createProductA(): AbstractProductA
      +createProductB(): AbstractProductB
    }
    class "ConcreteFactory1" {
      +createProductA(): AbstractProductA
      +createProductB(): AbstractProductB
    }
    class "ConcreteFactory2" {
      +createProductA(): AbstractProductA
      +createProductB(): AbstractProductB
    }
    interface "AbstractProductA" {
      +operationA()
    }
    interface "AbstractProductB" {
      +operationB()
      +collaborateWith(AbstractProductA)
    }
    class "ProductA1" {
      +operationA()
    }
    class "ProductA2" {
      +operationA()
    }
    class "ProductB1" {
      +operationB()
      +collaborateWith(AbstractProductA)
    }
    class "ProductB2" {
      +operationB()
      +collaborateWith(AbstractProductA)
    }
    AbstractFactory <|.. ConcreteFactory1
    AbstractFactory <|.. ConcreteFactory2
    AbstractProductA <|.. ProductA1
    AbstractProductA <|.. ProductA2
    AbstractProductB <|.. ProductB1
    AbstractProductB <|.. ProductB2
    ConcreteFactory1 ..> ProductA1 : creates
    ConcreteFactory1 ..> ProductB1 : creates
    ConcreteFactory2 ..> ProductA2 : creates
    ConcreteFactory2 ..> ProductB2 : creates
    AbstractProductB --> AbstractProductA : uses
    
    note bottom of AbstractFactory
      Provides an interface for creating families of related or dependent objects
      without specifying their concrete classes.
    end note
  }

  ' Builder Pattern
  package "builder" {
    class "Director" {
      -builder: Builder
      +Director(Builder)
      +construct()
    }
    interface "Builder" {
      +buildPartA()
      +buildPartB()
      +buildPartC()
      +getResult(): Product
    }
    class "ConcreteBuilder" {
      -product: Product
      +ConcreteBuilder()
      +buildPartA()
      +buildPartB()
      +buildPartC()
      +getResult(): Product
    }
    class "Product" {
      -parts: List<String>
      +add(part: String)
      +show()
    }
    Director o--> Builder
    Builder <|.. ConcreteBuilder
    ConcreteBuilder --> Product : creates
    
    note bottom of Builder
      Separates the construction of a complex object from its representation,
      allowing the same construction process to create different representations.
    end note
  }

  ' Prototype Pattern
  package "prototype" {
    interface "Prototype" {
      +clone(): Prototype
      +operation()
    }
    class "ConcretePrototype1" {
      -field1: Type
      +ConcretePrototype1(prototype: ConcretePrototype1)
      +clone(): Prototype
      +operation()
    }
    class "ConcretePrototype2" {
      -field2: Type
      +ConcretePrototype2(prototype: ConcretePrototype2)
      +clone(): Prototype
      +operation()
    }
    class "Client" {
      -prototype: Prototype
      +operation()
    }
    Prototype <|.. ConcretePrototype1
    Prototype <|.. ConcretePrototype2
    Client --> Prototype
    
    note bottom of Prototype
      Specifies the kinds of objects to create using a prototypical instance,
      and creates new objects by copying this prototype.
    end note
  }
}

note bottom of generating
  Creational Design Patterns:
  - Deal with object creation mechanisms
  - Make systems independent of how objects are created, composed, and represented
  - Encapsulate knowledge about which concrete classes the system uses
  - Hide how instances of these classes are created and combined
end note

@enduml
