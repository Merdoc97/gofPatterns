@startuml Structure Patterns

package "structure" {
  ' Adapter Pattern
  package "adapter" {
    interface "Target" {
      +request()
    }
    class "Adapter" {
      -adaptee: Adaptee
      +request()
    }
    class "Adaptee" {
      +specificRequest()
    }
    Target <|.. Adapter
    Adapter --> Adaptee
  }

  ' Bridge Pattern
  package "bridge" {
    interface "Implementor" {
      +operationImpl()
    }
    class "ConcreteImplementorA" {
      +operationImpl()
    }
    class "ConcreteImplementorB" {
      +operationImpl()
    }
    abstract class "Abstraction" {
      #implementor: Implementor
      +operation()
    }
    class "RefinedAbstraction" {
      +operation()
    }
    Implementor <|.. ConcreteImplementorA
    Implementor <|.. ConcreteImplementorB
    Abstraction o-- Implementor
    Abstraction <|-- RefinedAbstraction
  }

  ' Composite Pattern
  package "composite" {
    abstract class "Component" {
      +operation()
      +add(Component)
      +remove(Component)
      +getChild(int)
    }
    class "Leaf" {
      +operation()
    }
    class "Composite" {
      -children: List<Component>
      +operation()
      +add(Component)
      +remove(Component)
      +getChild(int)
    }
    Component <|-- Leaf
    Component <|-- Composite
    Composite o-- Component
  }

  ' Decorator Pattern
  package "decorator" {
    interface "Component" {
      +operation()
    }
    class "ConcreteComponent" {
      +operation()
    }
    abstract class "Decorator" {
      -component: Component
      +operation()
    }
    class "ConcreteDecoratorA" {
      +operation()
      -addedState
    }
    class "ConcreteDecoratorB" {
      +operation()
      -addedBehavior()
    }
    Component <|.. ConcreteComponent
    Component <|.. Decorator
    Decorator o-- Component
    Decorator <|-- ConcreteDecoratorA
    Decorator <|-- ConcreteDecoratorB
  }

  ' Facade Pattern
  package "facade" {
    class "Facade" {
      -subsystem1: SubsystemA
      -subsystem2: SubsystemB
      -subsystem3: SubsystemC
      +operation()
    }
    class "SubsystemA" {
      +operationA()
    }
    class "SubsystemB" {
      +operationB()
    }
    class "SubsystemC" {
      +operationC()
    }
    Facade --> SubsystemA
    Facade --> SubsystemB
    Facade --> SubsystemC
  }

  ' Flyweight Pattern
  package "flyweight" {
    interface "Flyweight" {
      +operation(extrinsicState)
    }
    class "ConcreteFlyweight" {
      -intrinsicState
      +operation(extrinsicState)
    }
    class "UnsharedConcreteFlyweight" {
      -allState
      +operation(extrinsicState)
    }
    class "FlyweightFactory" {
      -flyweights: Map<key, Flyweight>
      +getFlyweight(key)
    }
    Flyweight <|.. ConcreteFlyweight
    Flyweight <|.. UnsharedConcreteFlyweight
    FlyweightFactory o-- Flyweight
  }

  ' Proxy Pattern
  package "proxy" {
    interface "Subject" {
      +request()
    }
    class "RealSubject" {
      +request()
    }
    class "Proxy" {
      -realSubject: RealSubject
      +request()
    }
    Subject <|.. RealSubject
    Subject <|.. Proxy
    Proxy --> RealSubject
  }
}

@enduml